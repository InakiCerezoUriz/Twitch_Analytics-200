{
	"info": {
		"_postman_id": "074645a9-2c64-476f-a457-72c1b086ed69",
		"name": "Tests API Twitch",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41734130",
		"_collection_link": "https://bold-resonance-108558.postman.co/workspace/TwitchAnalytics-200~df6ec828-ff58-4484-a919-0b14903beff5/collection/41749436-074645a9-2c64-476f-a457-72c1b086ed69?action=share&source=collection_link&creator=41734130"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Register - email valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Debe devolver una api_key\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"api_key\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuario@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - email existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Debe generar una nueva api_key\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"api_key\");\r",
									"    pm.environment.set(\"api_key\", jsonData.api_key);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuario@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - email inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Debe dar error de email inv치lido\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"The email must be a valid email address\");\r",
									"});\r",
									"\r",
									"console.log(\"游댌 LOCAL:\", pm.variables.get(\"api_key\"));\r",
									"console.log(\"游깴 ENV:\", pm.environment.get(\"api_key\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"noesunemail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - email vac칤o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Debe dar error por email obligatorio\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"The email is mandatory\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Token",
			"item": [
				{
					"name": "Token - email y API Key validos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Devuelve token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"    pm.environment.set(\"token\", jsonData.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"usuario@example.com\",\r\n    \"api_key\": \"{{api_key}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - email inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error correcto para email inv치lido\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"The email must be a valid email address\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"noesunemail\",\r\n  \"api_key\": \"algo\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - email vac칤o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error correcto cuando falta el email\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"The email is mandatory\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"api_key\": \"algo\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - API Key vac칤a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error correcto cuando falta la api_key\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"The api_key is mandatory\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuario@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - API Key incorrecta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error correcto para autenticaci칩n inv치lida\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Unauthorized. API access token is invalid.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuario@example.com\",\r\n  \"api_key\": \"api_key_falsa\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User - petici칩n v치lida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta contiene exactamente los campos esperados\", function () {\r",
									"    const json = pm.response.json();\r",
									"    \r",
									"    const expectedKeys = [\r",
									"        \"id\",\r",
									"        \"login\",\r",
									"        \"display_name\",\r",
									"        \"type\",\r",
									"        \"broadcaster_type\",\r",
									"        \"description\",\r",
									"        \"profile_image_url\",\r",
									"        \"offline_image_url\",\r",
									"        \"view_count\",\r",
									"        \"created_at\"\r",
									"    ];\r",
									"\r",
									"    // Comprueba que todas las claves esperadas existen\r",
									"    expectedKeys.forEach(key => {\r",
									"        pm.expect(json).to.have.property(key);\r",
									"    });\r",
									"\r",
									"    // Comprueba que no haya propiedades adicionales\r",
									"    const actualKeys = Object.keys(json);\r",
									"    pm.expect(actualKeys.length).to.eql(expectedKeys.length);\r",
									"    pm.expect(actualKeys.sort()).to.eql(expectedKeys.sort());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/user?id=1234",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - id vac칤o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error por falta de par치metro id\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Invalid or missing 'id' parameter.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/user?id=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - token inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de token inv치lido\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Unauthorized. Token is invalid or has expired.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_incorrecto",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/user?id=1234",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - usuario inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de usuario no encontrado\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"User not found.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/user?id=999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Streams",
			"item": [
				{
					"name": "Streams - petici칩n v치lida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta contiene un array de streams con propiedades correctas\", function () {\r",
									"    const json = pm.response.json();\r",
									"\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"\r",
									"    json.forEach(stream => {\r",
									"        pm.expect(stream).to.have.property(\"title\");\r",
									"        pm.expect(stream).to.have.property(\"user_name\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/streams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"streams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Streams - token inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de token inv치lido\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Unauthorized. Token is invalid or expired.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_incorrecto",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/streams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"streams"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enriched Streams",
			"item": [
				{
					"name": "EnrichedStreams - petici칩n v치lida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const limit = parseInt(pm.request.url.query.find(q => q.key === 'limit')?.value || '0');\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un array\", function () {\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(`El n칰mero de elementos es igual al valor de limit (${limit})`, function () {\r",
									"    pm.expect(json.length).to.eql(limit);\r",
									"});\r",
									"\r",
									"pm.test(\"Cada stream tiene las propiedades necesarias\", function () {\r",
									"    json.forEach(stream => {\r",
									"        pm.expect(stream).to.have.property(\"stream_id\");\r",
									"        pm.expect(stream).to.have.property(\"user_id\");\r",
									"        pm.expect(stream).to.have.property(\"user_name\");\r",
									"        pm.expect(stream).to.have.property(\"viewer_count\");\r",
									"        pm.expect(stream).to.have.property(\"title\");\r",
									"        pm.expect(stream).to.have.property(\"user_display_name\");\r",
									"        pm.expect(stream).to.have.property(\"profile_image_url\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/streams/enriched?limit=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"streams",
								"enriched"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EnrichedStreams - limit inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"El mensaje de error es el esperado\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Invalid 'limit' parameter.\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta solo contiene la propiedad 'error'\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(Object.keys(json).length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/streams/enriched?limit=pepe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"streams",
								"enriched"
							],
							"query": [
								{
									"key": "limit",
									"value": "pepe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EnrichedStreams - token inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"El mensaje de error es el esperado\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Unauthorized. Token is invalid or expired.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_incorrecto",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/streams/enriched?limit=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"streams",
								"enriched"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TopOfTheTops",
			"item": [
				{
					"name": "TOT- petici칩n v치lida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cada objeto tiene las propiedades esperadas\", function () {\r",
									"    const json = pm.response.json();\r",
									"    json.forEach(item => {\r",
									"        pm.expect(item).to.have.all.keys(\r",
									"            \"game_id\",\r",
									"            \"game_name\",\r",
									"            \"user_name\",\r",
									"            \"total_videos\",\r",
									"            \"total_views\",\r",
									"            \"most_viewed_title\",\r",
									"            \"most_viewed_views\",\r",
									"            \"most_viewed_duration\",\r",
									"            \"most_viewed_created_at\"\r",
									"        );\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/topsofthetops",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"topsofthetops"
							]
						}
					},
					"response": []
				},
				{
					"name": "TOT - since inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje correcto para 400\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Bad Request. Invalid or missing parameters.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/topsofthetops?since=abc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"topsofthetops"
							],
							"query": [
								{
									"key": "since",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TOT - since faltante",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje correcto para 400\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Bad Request. Invalid or missing parameters.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/topsofthetops?since=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"topsofthetops"
							],
							"query": [
								{
									"key": "since",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TOT - no data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje correcto para 404\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Not Found. No data available.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/topsofthetops",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"topsofthetops"
							]
						}
					},
					"response": []
				},
				{
					"name": "TOT - token inv치lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"El mensaje de error es el esperado\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"error\", \"Unauthorized. Token is invalid or expired.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_incorrecto",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/analytics/topsofthetops",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analytics",
								"topsofthetops"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}